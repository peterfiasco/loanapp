@page "/loan-applications/edit/{Id:int}"
@using LoanManagementSystem.Core.Interfaces
@using LoanManagementSystem.Core.Models
@inject ILoanApplicationService LoanService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-md-8">
            @if (model == null)
            {
                <div class="d-flex justify-content-center my-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (isSubmitting)
            {
                <div class="card shadow-sm">
                    <div class="card-body p-5 text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Saving...</span>
                        </div>
                        <p class="mt-3">Saving changes to loan application...</p>
                    </div>
                </div>
            }
            else
            {
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white py-3">
                        <h3 class="mb-0">
                            <i class="fas fa-edit me-2"></i>Edit Loan Application
                        </h3>
                    </div>
                    <div class="card-body p-4">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="fas fa-exclamation-circle me-2"></i> @errorMessage
                                <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                            </div>
                        }
                        
                        <div class="alert alert-info mb-4">
                            <div class="d-flex">
                                <div class="me-3">
                                    <i class="fas fa-info-circle fa-2x"></i>
                                </div>
                                <div>
                                    <h5 class="alert-heading">Application Details</h5>
                                    <p class="mb-0">Application #@model.Id - Submitted on @model.ApplicationDate.ToShortDateString()</p>
                                    <p class="mb-0">Current Status: 
                                        <span class="badge @GetStatusBadgeClass(model.LoanStatus)">
                                            @model.LoanStatus
                                        </span>
                                    </p>
                                </div>
                            </div>
                        </div>

                        <EditForm Model="@model" OnValidSubmit="HandleValidSubmit" FormName="editLoanForm">
                            <DataAnnotationsValidator />

                            <div class="row g-3">
                                <div class="col-md-12 mb-3">
                                    <label for="applicantName" class="form-label">Applicant Name</label>
                                    <InputText id="applicantName" class="form-control" @bind-Value="model.ApplicantName" />
                                    <ValidationMessage For="@(() => model.ApplicantName)" class="validation-message" />
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="loanAmount" class="form-label">Loan Amount ($)</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <InputNumber id="loanAmount" class="form-control" @bind-Value="model.LoanAmount" />
                                    </div>
                                    <ValidationMessage For="@(() => model.LoanAmount)" class="validation-message" />
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="loanTerm" class="form-label">Loan Term (months)</label>
                                    <InputNumber id="loanTerm" class="form-control" @bind-Value="model.LoanTerm" />
                                    <ValidationMessage For="@(() => model.LoanTerm)" class="validation-message" />
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="interestRate" class="form-label">Interest Rate (%)</label>
                                    <div class="input-group">
                                        <InputNumber id="interestRate" class="form-control" @bind-Value="model.InterestRate" step="0.01" />
                                        <span class="input-group-text">%</span>
                                    </div>
                                    <ValidationMessage For="@(() => model.InterestRate)" class="validation-message" />
                                </div>

                                <div class="col-md-6 mb-3">
                                    <label for="status" class="form-label">Status</label>
                                    <InputSelect id="status" @bind-Value="model.LoanStatus" class="form-select">
                                        @foreach (var status in Enum.GetValues(typeof(LoanStatus)))
                                        {
                                            <option value="@status">@status</option>
                                        }
                                    </InputSelect>
                                </div>

                                <div class="col-12 mt-4 d-flex justify-content-between">
                                    <a href="/loan-applications" class="btn btn-outline-secondary">
                                        <i class="fas fa-arrow-left me-1"></i> Back to List
                                    </a>
                                    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                        <i class="fas fa-save me-1"></i> Save Changes
                                    </button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private LoanApplication? model;
    private bool isSubmitting = false;
    private string? errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            model = await LoanService.GetLoanApplicationByIdAsync(Id);
            
            if (model == null)
            {
                NavigationManager.NavigateTo("/loan-applications");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading loan application: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        if (model == null) return;
        
        try
        {
            isSubmitting = true;
            errorMessage = null;
            StateHasChanged();
            
            await LoanService.UpdateLoanApplicationAsync(model);
            
            // Force a delay to ensure server processing completes
            await Task.Delay(500);
            
            // Use absolute path with forceLoad to ensure proper navigation
            NavigationManager.NavigateTo("/loan-applications", forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating loan application: {ex.Message}";
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private string GetStatusBadgeClass(LoanStatus status) => status switch
    {
        LoanStatus.Approved => "bg-success",
        LoanStatus.Rejected => "bg-danger",
        LoanStatus.Pending => "bg-warning",
        _ => "bg-secondary"
    };
}
