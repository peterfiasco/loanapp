@page "/loan-applications"
@using LoanManagementSystem.Core.Interfaces
@using LoanManagementSystem.Core.Models
@inject ILoanApplicationService LoanService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="container-fluid">
    <h2 class="page-heading">
        <i class="fas fa-file-invoice-dollar me-2"></i>Loan Applications
    </h2>

    <div class="card mb-4">
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text bg-light">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" class="form-control" placeholder="Search applicants..." @bind="searchTerm" @bind:event="oninput" />
                    </div>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="statusFilter">
                        <option value="">All Statuses</option>
                        <option value="Pending">Pending</option>
                        <option value="Approved">Approved</option>
                        <option value="Rejected">Rejected</option>
                    </select>
                </div>
                <div class="col-md-3 text-end">
                    <a href="/loan-applications/create" class="btn btn-primary">
                        <i class="fas fa-plus me-1"></i> New Application
                    </a>
                </div>
            </div>

            @if (loans == null)
            {
                <div class="d-flex justify-content-center my-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!loans.Any())
            {
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i> No loan applications found. Create a new one to get started!
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Applicant</th>
                                <th>Amount</th>
                                <th>Term</th>
                                <th>Interest</th>
                                <th>Status</th>
                                <th>Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var loan in FilteredLoans)
                            {
                                <tr>
                                    <td>@loan.Id</td>
                                    <td>@loan.ApplicantName</td>
                                    <td>@loan.LoanAmount.ToString("C")</td>
                                    <td>@loan.LoanTerm months</td>
                                    <td>@loan.InterestRate%</td>
                                    <td>
                                        <span class="status-badge @GetStatusClass(loan.LoanStatus)">
                                            @loan.LoanStatus
                                        </span>
                                    </td>
                                    <td>@loan.ApplicationDate.ToShortDateString()</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a href="/loan-applications/edit/@loan.Id" class="btn btn-sm btn-outline-primary">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            @if (loan.LoanStatus == LoanStatus.Pending)
                                            {
                                                <button class="btn btn-sm btn-outline-success" @onclick="() => ApproveLoan(loan.Id)">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => RejectLoan(loan.Id)">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            }
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteLoan(loan.Id)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<LoanApplication>? loans;
    private string searchTerm = "";
    private string statusFilter = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadLoans();
    }

    private async Task LoadLoans()
    {
        loans = await LoanService.GetAllLoanApplicationsAsync();
    }

    private IEnumerable<LoanApplication> FilteredLoans => loans?.Where(l => 
        (string.IsNullOrEmpty(searchTerm) || l.ApplicantName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrEmpty(statusFilter) || l.LoanStatus.ToString() == statusFilter)
    ) ?? Array.Empty<LoanApplication>();

    private async Task ApproveLoan(int id)
    {
        if (!await ConfirmAction("Are you sure you want to approve this loan application?"))
            return;
            
        await LoanService.ApproveLoanAsync(id);
        await LoadLoans();
    }

    private async Task RejectLoan(int id)
    {
        if (!await ConfirmAction("Are you sure you want to reject this loan application?"))
            return;
            
        await LoanService.RejectLoanAsync(id);
        await LoadLoans();
    }

    private async Task DeleteLoan(int id)
    {
        if (!await ConfirmAction("Are you sure you want to delete this loan application? This action cannot be undone."))
            return;
            
        await LoanService.DeleteLoanApplicationAsync(id);
        await LoadLoans();
    }

    private string GetStatusClass(LoanStatus status) => status switch
    {
        LoanStatus.Pending => "status-pending",
        LoanStatus.Approved => "status-approved",
        LoanStatus.Rejected => "status-rejected",
        _ => ""
    };

    private string GetStatusBadgeClass(LoanStatus status) => status switch
    {
        LoanStatus.Approved => "bg-success",
        LoanStatus.Rejected => "bg-danger",
        LoanStatus.Pending => "bg-warning",
        _ => "bg-secondary"
    };

    private Task<bool> ConfirmAction(string message)
    {
        // In a production app, you will use a confirmation dialog component
        return Task.FromResult(true);
    }
}
